services:
  nginx:
    build: 
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
        DOMAIN_NAME: ${DOMAIN_NAME}
    container_name: nginx
    ports:
      - "8443:443"
    networks:
      - hypertube-net
    depends_on:
      - frontend
      - backend-user

  frontend:
    container_name: frontend
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
        NEXT_PUBLIC_HOSTNAME: ${NEXT_PUBLIC_HOSTNAME}
    expose:
      - 4000
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    networks:
      - hypertube-net
    stdin_open: true
    tty: true

  backend-user:
    container_name: backend-user
    build: ./services/backend-user
    expose:
      - 6000
    env_file:
      - .env
    volumes:
      - ./services/backend-user:/app
    networks:
      - hypertube-net
    depends_on:
      postgresql:
        condition: service_healthy


  backend-scraper:
    container_name: backend-scraper
    build: ./services/backend-scraper
    expose:
      - 8000
    volumes:
      - ./services/backend-scraper:/app
    networks:
      - hypertube-net
    env_file:
      - ./.env
    # depends_on:
    #   postgresql:
    #     condition: service_healthy

  backend-movies:
    container_name: backend-movies
    build: ./services/backend-movies
    expose:
      - 7000
    volumes:
      - ./services/backend-movies:/app
    networks:
      - hypertube-net
    env_file:
      - .env
    depends_on:
      postgresql:
        condition: service_healthy

  postgresql:
    container_name: postgresql
    image: postgres:17
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/postgres-db/init-roles.sh:/docker-entrypoint-initdb.d/init-roles.sh:ro
    env_file:
      - .env
    networks:
      - hypertube-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s

  db-manager:
    image: postgres:17
    container_name: db-manager
    env_file: .env
    volumes:
      - ./services/db-manager/script.sh:/script.sh:ro
    entrypoint: ["bash", "/script.sh"]
    networks:
      - hypertube-net
    depends_on:
      - postgresql
      - backend-user
      - backend-movies
    restart: "no"

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    env_file:
      - .env
    volumes:
      - ./services/pgadmin/servers.json:/pgadmin4/servers.json
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - hypertube-net
    depends_on:
      - postgresql

networks:
  hypertube-net:
    driver: bridge

volumes:
  pgdata:
    driver: local
  pgadmin-data:
    driver: local
