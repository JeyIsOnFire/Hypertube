
services:
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "4000:4000"
    volumes:
      - ./frontend:/app  # Monte les fichiers locaux dans le conteneur pour hot reload
      - /app/node_modules  # Assure que les modules installés sont persistants
    networks:
      - hypertube-net
    environment:
      - NODE_ENV=development
    stdin_open: true  # Permet une interaction continue
    tty: true  # Nécessaire pour le hot reload
    env_file:
      - .env

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - ./backend/hypertube:/app
    networks:
      - hypertube-net
    depends_on:
      db:
        condition: service_healthy

  # backend-user:
  #   container_name: backend-user
  #   build:
  #     context: .
  #     dockerfile: ./auth/Dockerfile
  #   ports:
  #     - "6000:6000"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./backend/hypertube:/app
  #   networks:
  #     - hypertube-net
  #   depends_on:
  #     db:
  #       condition: service_healthy

  # backend-api:
  #   container_name: backend-api
  #   build:
  #     context: .
  #     dockerfile: ./auth/Dockerfile
  #   ports:
  #     - "7000:7000"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./backend/hypertube:/app
  #   networks:
  #     - hypertube-net
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #
  nginx:
    container_name: server
    image: nginx:alpine
    ports:
      - "8880:8880"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - .nginx/certs:/etc/nginx/certs
    networks:
      - hypertube-net
    depends_on:
      - frontend
      - backend

  db:
    container_name: db
    build:
      context: ./db
      dockerfile: Dockerfile
    image: postgres:17
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./db/script.sh:/docker-entrypoint-initdb.d/01_script.sh
      # - ./backend/hypertube/imdb_data/data:/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB} 
    networks:
      - hypertube-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5051:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - hypertube-net
    depends_on:
      - db

  # redis:
  #   container_name: redis
  #   image: redis:alpine
  #   ports:
  #     - "6380:6379"
  #   networks:
  #     - hypertube-net


  # streamer:
  #   container_name: stream
  #   build: ./streamer  # Si tu as un Dockerfile dans le répertoire ./streamer
  #   volumes:
  #     - ./videos:/app/videos
  #   networks:
  #     - hypertube-net
  #   depends_on:
  #     - backend

networks:
  hypertube-net:
    driver: bridge

volumes:
  pgdata:
    driver: local

